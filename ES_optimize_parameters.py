import pandas as pd
import os
from eigenscore_ood_detection import run_multiple_with_validation_preload

'''
This script runs parameter optimization for EigenScore. Since timesteps and aggregation method
are two most important arguments, this script iterates over all combinations of them those two parameters.

Arguments / Configurations:
---------------------------
- timesteps_grid (list[list[int]]):
    Contiguous timestep combinations generated by `generate_contiguous_timesteps`.
    Defines which timesteps to include when aggregating eigenvalue features.

- aggregation_methods (list[str]):
    Methods to combine eigenvalue features across timesteps.
    Options: "mean", "median", "all".

- num_repetitions (int):
    Number of repetitions to run for each calculation

- output_dir (str):
    Directory where results and logs will be saved.

- eigenvalues_path (str):
    Directory containing Excel files with precomputed eigenvalue features.

- test_fraction (float):
    Fraction of data reserved for the final test set.
    Remaining data is split between training and validation.

- dataset_pairs (list[tuple[str, str]]):
    List of (ID dataset, OOD dataset) pairs to evaluate.
    Example: ("celeba", "cifar10").
'''


def generate_contiguous_timesteps(start=100, stop=700, step=50):
    """Generate comprehensive contiguous combinations from start to stop with given step."""
    values = list(range(start, stop + 1, step))
    combos = []
    n = len(values)
    for length in range(1, n + 1):
        for i in range(0, n - length + 1):
            combos.append(values[i : i + length])
    return combos


if __name__ == "__main__":
    #####Configuration#####
    timesteps_grid = generate_contiguous_timesteps(100, 700, 50)
    aggregation_methods = ["mean", "median", "all"]
    num_repetitions = 20
    output_dir = "z_parameters_final_with_validation"
    eigenvalues_path = "../../GaussianDenoisingPosterior-main/Z_Z_FINAL/Results"
    test_fraction = 0.5  # 50% for final test
    dataset_pairs = [
        ("celeba", "cifar10"),
        ("celeba", "cifar100"),
        ("celeba", "svhn"),

    ]
    #######################


    for id_dataset, ood_dataset in dataset_pairs:
        id_file = f"{eigenvalues_path}/{id_dataset}_{id_dataset}_eigenvalues_by_timestep_reps.xlsx"
        ood_file = f"{eigenvalues_path}/{id_dataset}_{ood_dataset}_eigenvalues_by_timestep_reps.xlsx"


        print(
            f"\n=== Running Optimization for ID='{id_dataset}' | OOD='{ood_dataset}' ==="
        )
        print(
            f"Data splits: Train=50.0% (ID), Val=50.0% (same ID) + 50.0% (OOD), Test=50.0% (ID) + 50.0% (OOD)"
        )

        run_multiple_with_validation_preload(
            id_file=id_file,
            ood_file=ood_file,
            timesteps_grid=timesteps_grid,
            aggregation_methods=aggregation_methods,
            num_repetitions=num_repetitions,
            id_dataset=id_dataset,
            ood_dataset=ood_dataset,
            output_dir=output_dir,
            test_fraction=test_fraction,
        )
    print(f"Results saved in directory: {output_dir}")
